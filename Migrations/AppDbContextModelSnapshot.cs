// <auto-generated />
using System;
using GraphQLDemo.API.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GraphQLDemo.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GraphQLDemo.API.Entities.CourseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("CourseId");

                    b.Property<Guid>("InstructorId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("CourseName");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Subject");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("IDX_CourseId_Courses");

                    b.HasIndex("InstructorId")
                        .IsUnique();

                    b.ToTable("Courses", (string)null);
                });

            modelBuilder.Entity("GraphQLDemo.API.Entities.InstructorType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("InstructorId");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("InstructorFirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("InstructorLastName");

                    b.Property<decimal>("Salary")
                        .HasPrecision(10, 2)
                        .HasColumnType("DECIMAL")
                        .HasColumnName("Salary");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("IDX_InstructorId_Instructor");

                    b.ToTable("Instructors", (string)null);
                });

            modelBuilder.Entity("GraphQLDemo.API.Entities.StudentCourse", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("StudentId");

                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("CourseId");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("IDX_CourseId_StudentsCourses");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("IDX_StudentId_StudentsCourses");

                    b.ToTable("StudentsCourses", (string)null);
                });

            modelBuilder.Entity("GraphQLDemo.API.Entities.StudentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("StudentId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("StudentFirstName");

                    b.Property<float>("Gpa")
                        .HasColumnType("REAL")
                        .HasColumnName("Gpa");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("StudentLastName");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("IDX_StudentId_Student");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("GraphQLDemo.API.Entities.CourseType", b =>
                {
                    b.HasOne("GraphQLDemo.API.Entities.InstructorType", "Instructor")
                        .WithOne("Course")
                        .HasForeignKey("GraphQLDemo.API.Entities.CourseType", "InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("GraphQLDemo.API.Entities.StudentCourse", b =>
                {
                    b.HasOne("GraphQLDemo.API.Entities.CourseType", "Course")
                        .WithMany("StudentsCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphQLDemo.API.Entities.StudentType", "Student")
                        .WithMany("StudentsCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GraphQLDemo.API.Entities.CourseType", b =>
                {
                    b.Navigation("StudentsCourses");
                });

            modelBuilder.Entity("GraphQLDemo.API.Entities.InstructorType", b =>
                {
                    b.Navigation("Course")
                        .IsRequired();
                });

            modelBuilder.Entity("GraphQLDemo.API.Entities.StudentType", b =>
                {
                    b.Navigation("StudentsCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
